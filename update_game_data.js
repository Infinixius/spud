import { exec, execSync } from "child_process"
import fs from "fs"

// if (fs.existsSync("./shattered-pixel-dungeon")) fs.rmSync("./shattered-pixel-dungeon", { recursive: true, force: true })
// execSync("git clone https://github.com/00-Evan/shattered-pixel-dungeon.git ./shattered-pixel-dungeon")

console.log("// This file was automatically generated by update_game_data.js. Do not edit it manually.")
console.log(`// Generated on ${new Date().toLocaleString()}`)
console.log("\n")

const game_version_req = fs.readFileSync("./shattered-pixel-dungeon/build.gradle", "utf-8")
const game_version = game_version_req.match(/appVersionCode = (.*)/)[1]
console.log(`const SUPPORTED_GAME_VERSION = ${game_version};`)

let item_ids = {} // used later

const items_data = fs.readFileSync("./shattered-pixel-dungeon/core/src/main/assets/messages/items/items.properties", "utf-8")
const items = [...items_data.matchAll(/items\.(.*).name\=(.*)\n/g)]
console.log(`const ITEM_ID_TO_NAME = {`)
items.forEach(item => {
	const item_id = item[1].replace(/_/g, " ")
	const item_name = item[2]

	if (
		item_id.includes("curses") ||
		item_id.includes("glyphs") ||
		item_id.includes("enchantments") ||
		item_id.includes("ability") ||
		item_id.includes("pasty.") ||
		item_id.includes(".staff") ||
		item_id.includes("$")
	) return

	console.log(`\t"${item_id}": "${item_name}",`)
	item_ids[item_id] = item_name
})

const plants_data = fs.readFileSync("./shattered-pixel-dungeon/core/src/main/assets/messages/plants/plants.properties", "utf-8")
const plants = [...plants_data.matchAll(/(plants\..*)\$seed\.name=(.*)/g)]
plants.forEach(plant => {
	const item_id = plant[1].replace(/_/g, " ")
	const item_name = plant[2]

	console.log(`\t"${item_id}": "${item_name}",`)
	item_ids[item_id] = item_name
})
console.log(`};`)

console.log(`const xy = (x, y) => (x-1) + 16 * (y-1);`)
console.log(`const rxy = (n) => [((n % 16) + 1), (Math.floor(n / 16) + 1)];`)
console.log(`const SOMETHING = 0;`)
console.log("const DARTS = xy(1,11);") // Temporary fix: https://github.com/00-Evan/shattered-pixel-dungeon/issues/2043

const item_sprite_sheet_data = fs.readFileSync("./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java", "utf-8")
const item_sprite_sheet_regex = /(private|public) static final int (.*)\s*=\s*(.*);/g
const item_sprite_sheet_ids = [...item_sprite_sheet_data.matchAll(item_sprite_sheet_regex)]
let item_sprite_sheet = []
let consts_already = []
item_sprite_sheet_ids.forEach(item => {
	const item_id = item[2]
	const sprite_position = item[3]

	if (item[1] == "public") { // Just an item
		// if (item_sprite_sheet[item_id.trim()]) return
		item_sprite_sheet[item_id.trim()] = sprite_position.trim()
	} else if (item[1] == "private") { // Item category
		if (consts_already.includes(item_id.trim())) {
			console.log(`const ${item_id.trim()}_ICON = ${sprite_position};`)
			return
		}

		consts_already.push(item_id.trim())
		console.log(`const ${item_id.trim()} = ${sprite_position};`)
	}
})

let ITEM_ID_TO_GAME_ID = {}

let ENCHANTABLE_ITEMS = []
let GLYPHABLE_ITEMS = []

console.log(`const ITEM_NAME_TO_SPRITE = {`)
Object.keys(item_ids).forEach(item_id => {
	let item_path = item_id.replace(/\./g, "/").split("/").slice(0,-1).join("/")
	let item_name = item_id.replace(/'S/g, "s").replace(/'/g, "").replace(/ /g, "").split(".").pop()

	if (item_path.includes("plants")) return
	fs.readdirSync(`./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/${item_path}`)
		.filter(file => file.endsWith(".java"))
		.forEach(file => {
			if (file.toLowerCase().replace(".java", "") == item_name) {
				let data = fs.readFileSync(`./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/${item_path}/${file}`, "utf-8")
				let spritesheet_id = data.match(/image = ItemSpriteSheet\.(.*);/)
				let spritesheet_icon_id = data.match(/icon = ItemSpriteSheet\.Icons\.(.*);/)

				ITEM_ID_TO_GAME_ID[item_id] = ("com.shatteredpixel.shatteredpixeldungeon.items." + item_id.split(".").slice(0,-1).join(".") + "." + file.replace(".java", "")).replace("..", ".")
				
				if (spritesheet_id) {
					console.log(`\t"${item_id}": ${JSON.stringify({
						"id": spritesheet_id[1],
						"pos": item_sprite_sheet[spritesheet_id[1]],
						"icon": spritesheet_icon_id ? spritesheet_icon_id[1] : "SOMETHING"
					})},`)
				} else {
					console.log(`\t"${item_id}": ${JSON.stringify({
						"id": "SOMETHING",
						"pos": "SOMETHING",
						"icon": spritesheet_icon_id ? spritesheet_icon_id[1] : "SOMETHING"
					})},`)
				}
			}
		})
})

fs.readdirSync(`./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants`)
	.filter(file => file.endsWith(".java"))
	.forEach(file => {
		let data = fs.readFileSync(`./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/${file}`, "utf-8")
		let spritesheet_id = data.match(/image = ItemSpriteSheet\.(.*);/)
		if (spritesheet_id) {
			const item_id = `plants.${spritesheet_id[1].replace("SEED_", "").toLowerCase()}`
			console.log(`\t"${item_id}": ${JSON.stringify({
				"id": spritesheet_id[1],
				"pos": item_sprite_sheet[spritesheet_id[1]]
			})},`)
		}
	})

console.log(`};`)

console.log(`const ITEM_NAME_TO_SPRITE_RECT = {`)
const item_sprite_rect_data = fs.readFileSync("./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java", "utf-8")
const item_sprite_rect_regex = /assignItemRect\((.*),(.*),(.*)\);/g
const icon_sprite_rect_regex = /assignIconRect\((.*),(.*),(.*)\);/g
const item_sprite_rect_ids = [...item_sprite_rect_data.matchAll(item_sprite_rect_regex)]
item_sprite_rect_ids.forEach(item => {
	const item_id = item[1]
	const x = item[2].trim()
	const y = item[3].trim()

	if (item_id == "i") return // For loops, handled below

	console.log(`\t"${item_id}": {x: ${x}, y: ${y}},`)
})

const icon_sprite_rect_ids = [...item_sprite_rect_data.matchAll(icon_sprite_rect_regex)]
icon_sprite_rect_ids.forEach(item => {
	const item_id = item[1].trim()
	const x = item[2].trim()
	const y = item[3].trim()

	if (item_id == "i") return // For loops

	console.log(`\t"${item_id}_ICON": {x: ${x}, y: ${y}},`)
})

const item_sprite_rect_forloop_regex = /for \(int i = (.*); i < (.*)\+(.*); i\+\+\)\s*assignItemRect\(i, (.*), (.*)\);/g
const item_sprite_rect_forloop_ids = [...item_sprite_rect_data.matchAll(item_sprite_rect_forloop_regex)]
item_sprite_rect_forloop_ids.forEach(item => {
	const item_id = item[1]
	const x = item[4].trim()
	const y = item[5].trim()

	let for_loop_expanded = [...item_sprite_rect_data.matchAll(`public static final int (.*)= ${item_id}\+(.*);`)]
	if (item_id == "BREWS") {
		for_loop_expanded = for_loop_expanded.concat([...item_sprite_rect_data.matchAll(`public static final int (.*)= ELIXIR\+(.*);`)])
	}
	for_loop_expanded.forEach(item_fr => {
		const item_id = item_fr[1].trim()

		console.log(`\t"${item_id}": {x: ${x}, y: ${y}},`)
	})
})

console.log(`};`)

console.log(`const ITEM_ID_TO_GAME_ID = ${JSON.stringify(ITEM_ID_TO_GAME_ID, null, 2)};`)

console.log(`const SPRITE_ID_TO_SPRITE_ICON_POS = {`)
item_sprite_sheet_ids.forEach(item => {
	const item_id = item[2]
	const sprite_position = item[3]

	if (item_id.startsWith("POTION_") || item_id.startsWith("SCROLL_") || item_id.startsWith("RING_")) {
		console.log(`\t"${item_id.trim()}": "${sprite_position.trim()}",`)
	}
})
console.log(`};`)

console.log(`const EXOTIC_ID_TO_REGULAR_ID = {`)
const exotic_scroll_data = fs.readFileSync("./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/exotic/ExoticScroll.java", "utf-8")
const exotic_scroll_regex = /exoToReg\.put\((.*), (.*)\);/gm
const exotic_potion_data = fs.readFileSync("./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/ExoticPotion.java", "utf-8")
const exotic_potion_regex = /exoToReg\.put\((.*), (.*)\);/gm
const exotic_ids = [...exotic_scroll_data.matchAll(exotic_scroll_regex), ...exotic_potion_data.matchAll(exotic_potion_regex)]

exotic_ids.forEach(item => {
	const exotic = item[1].replace(".class", "").trim()
	const regular = item[2].replace(".class", "").trim()

	console.log(`\t"${exotic}": "${regular}",`)
})
console.log(`};`)

let enchantments = [
	...fs.readdirSync("./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments")
		.map(file => `weapon.enchantments.${file.replace(".java", "")}`),
	...fs.readdirSync("./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/curses")
		.map(file => `weapon.curses.${file.replace(".java", "")}`),
]

console.log(`const ENCHANTMENTS = ${JSON.stringify(enchantments, null, 2)};`)


let glyphs = [
	...fs.readdirSync("./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs")
		.map(file => `armor.glyphs.${file.replace(".java", "")}`),
	...fs.readdirSync("./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses")
		.map(file => `armor.curses.${file.replace(".java", "")}`),
]

console.log(`const GLYPHS = ${JSON.stringify(glyphs, null, 2)};`)