import { exec, execSync } from "child_process"
import fs from "fs"

// if (fs.existsSync("./shattered-pixel-dungeon")) fs.rmSync("./shattered-pixel-dungeon", { recursive: true, force: true })
// execSync("git clone https://github.com/00-Evan/shattered-pixel-dungeon.git ./shattered-pixel-dungeon")

console.log("// This file was automatically generated by update_game_data.js. Do not edit it manually.")
console.log(`// Generated on ${new Date().toLocaleString()}`)
console.log("\n")

const game_version_req = fs.readFileSync("./shattered-pixel-dungeon/build.gradle", "utf-8")
const game_version = game_version_req.match(/appVersionCode = (.*)/)[1]
console.log(`const SUPPORTED_GAME_VERSION = ${game_version};`)

const items_req = fs.readFileSync("./shattered-pixel-dungeon/core/src/main/assets/messages/items/items.properties", "utf-8")
const items = [...items_req.matchAll(/items\.(.*).name\=(.*)\n/g)]
let item_ids = {} // used later
console.log(`const ITEM_ID_TO_NAME = {`)
items.forEach(item => {
	const item_id = item[1].replace(/_/g, " ")
	const item_name = item[2]

	if (
		item_id.includes("curses") ||
		item_id.includes("glyphs") ||
		item_id.includes("enchantments") ||
		item_id.includes("ability") ||
		item_id.includes("pasty.") ||
		item_id.includes(".staff") ||
		item_id.includes("$")
	) return

	console.log(`\t"${item_id}": "${item_name}",`)
	item_ids[item_id] = item_name
})
console.log(`};`)

console.log(`const xy = (x, y) => (x-1) + 16 * (y-1);`)
console.log(`const SOMETHING = 0;`)
console.log("const DARTS = 1 * 11;") // Temporary fix: https://github.com/00-Evan/shattered-pixel-dungeon/issues/2043

const item_sprite_sheet_data = fs.readFileSync("./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java", "utf-8")
const item_sprite_sheet_regex = /(private|public) static final int (.*)\s*=\s*(.*);/g
const item_sprite_sheet_ids = [...item_sprite_sheet_data.matchAll(item_sprite_sheet_regex)]
let item_sprite_sheet = []
let consts_already = []
item_sprite_sheet_ids.forEach(item => {
	const item_id = item[2]
	const sprite_position = item[3]

	if (item[1] == "public") { // Just an item
		item_sprite_sheet[item_id.trim()] = sprite_position.trim()
	} else if (item[1] == "private") { // Item category
		if (consts_already.includes(item_id.trim())) return

		consts_already.push(item_id.trim())
		console.log(`const ${item_id.trim()} = ${sprite_position};`)
	}

})

console.log(`const ITEM_NAME_TO_SPRITE_ID = {`)
for (const item_id of Object.keys(item_ids)) {
	// const file = `./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/${item_id.replace(/\./g, "/")}.java`
	let item_path = item_id.replace(/\./g, "/").split("/").slice(0,-1).join("/")
	let item_name = item_id.replace(/'S/g, "s").replace(/'/g, "").replace(/ /g, "").split(".").pop()

	fs.readdirSync(`./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/${item_path}`)
		.filter(file => file.endsWith(".java"))
		.forEach(file => {
			if (file.toLowerCase().replace(".java", "") == item_name) {
				let data = fs.readFileSync(`./shattered-pixel-dungeon/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/${item_path}/${file}`, "utf-8")
				let spritesheet_id = data.match(/image = ItemSpriteSheet\.(.*);/)
				if (spritesheet_id) {
					console.log(`\t"${item_id}": "${item_sprite_sheet[spritesheet_id[1]]}",`)
				} else {
					console.log(`\t"${item_id}": "SOMETHING",`)
				}
			}
		})
}
console.log(`};`)